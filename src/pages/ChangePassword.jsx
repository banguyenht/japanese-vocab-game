import { useState } from "react";
import { updatePassword } from "firebase/auth";
import { auth } from "../firebaseConfig";
import { useNavigate } from "react-router-dom";

export default function ChangePassword() {
  const navigate = useNavigate();
  const [currentPassword, setCurrentPassword] = useState("");
  const [newPassword, setNewPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const [error, setError] = useState("");
  const [notice, setNotice] = useState("");

  const handleChangePassword = async (e) => {
    e.preventDefault();
    setError("");
    setNotice("");

    const user = auth.currentUser;

    if (!user) {
      setError("B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p.");
      return;
    }

    if (newPassword !== confirmPassword) {
      setError("M·∫≠t kh·∫©u m·ªõi v√† x√°c nh·∫≠n kh√¥ng kh·ªõp.");
      return;
    }

    try {
      await updatePassword(user, newPassword);
      setNotice("‚úÖ ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng!");
      setNewPassword("");
      setConfirmPassword("");
    } catch (err) {
      console.error(err);
      if (err.code === "auth/requires-recent-login") {
        setError("Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i ƒë·ªÉ ƒë·ªïi m·∫≠t kh·∫©u.");
        // Optional: ƒëi·ªÅu h∆∞·ªõng t·ªõi login n·∫øu c·∫ßn
        // navigate("/login");
      } else {
        setError("ƒê·ªïi m·∫≠t kh·∫©u th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i.");
      }
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-tr from-indigo-100 via-white to-pink-100 flex items-center justify-center p-4">
      <div className="bg-white rounded-2xl shadow-xl w-full max-w-md p-8 border border-gray-200">
        <h2 className="text-2xl font-bold text-center text-indigo-700 mb-6">üîí ƒê·ªïi m·∫≠t kh·∫©u</h2>

        {error && (
          <div className="bg-red-100 text-red-700 text-sm p-3 rounded mb-4 border border-red-300">
            {error}
          </div>
        )}

        {notice && (
          <div className="bg-green-100 text-green-700 text-sm p-3 rounded mb-4 border border-green-300">
            {notice}
          </div>
        )}

        <form onSubmit={handleChangePassword} className="space-y-5">
          {/* B·∫°n c√≥ th·ªÉ b·ªè currentPassword n·∫øu kh√¥ng c·∫ßn x√°c nh·∫≠n l·∫°i */}
          {/* <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">M·∫≠t kh·∫©u hi·ªán t·∫°i</label>
            <input
              type="password"
              value={currentPassword}
              onChange={(e) => setCurrentPassword(e.target.value)}
              className="w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm"
              placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
            />
          </div> */}

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">M·∫≠t kh·∫©u m·ªõi</label>
            <input
              type="password"
              required
              value={newPassword}
              onChange={(e) => setNewPassword(e.target.value)}
              className="w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm"
              placeholder="M·∫≠t kh·∫©u m·ªõi"
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">X√°c nh·∫≠n m·∫≠t kh·∫©u</label>
            <input
              type="password"
              required
              value={confirmPassword}
              onChange={(e) => setConfirmPassword(e.target.value)}
              className="w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm"
              placeholder="X√°c nh·∫≠n m·∫≠t kh·∫©u m·ªõi"
            />
          </div>

          <button
            type="submit"
            className="w-full bg-indigo-600 hover:bg-indigo-700 text-white py-2 rounded-lg font-medium"
          >
            ƒê·ªïi m·∫≠t kh·∫©u
          </button>
        </form>
      </div>
    </div>
  );
}
